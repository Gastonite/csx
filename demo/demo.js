var extend = csx.extend;
var tall = { height: '150px' };
var tallVertical = extend(csx.vertical, { height: '250px' });
var tallHorizontal = extend(csx.horizontal, tall);
var narrowHorizontal = extend(csx.horizontal, { width: '220px' });
var content = React.createElement("div", null, React.createElement("h1", null, "Pure layout. Nothing more. Nothing less."), React.createElement("div", null, React.createElement("a", {"href": "https://github.com/basarat/csx/blob/gh-pages/demo/demo.jsx"}, "Source")), React.createElement("h2", null, "Entice", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#entice"}, "#")), React.createElement("p", null, "Use the ", React.createElement("code", null, "centerCenter"), " style to center Center"), React.createElement("div", {"className": "demo", "style": extend(csx.centerCenter, tall)}, React.createElement("div", null, "Look ma. Center Center and no table.")), React.createElement("h2", {"id": "horizontal-and-vertical-layout"}, "Horizontal and vertical layout", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#horizontal-and-vertical-layout"}, "#")), React.createElement("p", null, "When a container includes the ", React.createElement("code", null, "horizontal"), " or ", React.createElement("code", null, "vertical"), " style, it can become a flex container with the specified orientation"), React.createElement("div", {"className": "demo", "style": csx.horizontal}, React.createElement("div", null, "One"), React.createElement("div", null, "Two"), React.createElement("div", null, "Three")), React.createElement("h3", {"id": "flexible-children", "class": "has-permalink"}, "Flexible children", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#flexible-children"}, "#")), React.createElement("p", null, "Children of an element using the ", React.createElement("code", null, "layout"), " styles can use ", React.createElement("code", null, "flex"), " style to control their own sizing. For example:"), React.createElement("div", {"className": "demo", "style": csx.horizontal}, React.createElement("div", null, "Alpha"), React.createElement("div", {"style": csx.flex}, "Beta (flex)"), React.createElement("div", null, "Gamma")), React.createElement("p", null, "The same is true for children of ", React.createElement("code", null, "vertical"), " elements:"), React.createElement("p", null, React.createElement("strong", null, "Note"), ": for vertical layouts, the container needs to have a height for the children to flex correctly."), React.createElement("div", {"className": "demo", "style": tallVertical}, React.createElement("div", null, "Alpha"), React.createElement("div", {"style": csx.flex}, "Beta (flex)"), React.createElement("div", null, "Gamma")), React.createElement("p", null, "Children elements can be told to take up more space by including a “flex ratio” with the ", React.createElement("code", null, "flex"), " style. A flex ratio is specified with a number: ", React.createElement("em", null, "1"), ", ", React.createElement("em", null, "2"), ", ", React.createElement("em", null, "3"), ", currently up to ", React.createElement("em", null, "12"), "."), React.createElement("p", null, "For example, to make “Gamma” 2x larger than “Beta” and “Alpha” 3x larger, use ", React.createElement("code", null, "flex2"), " and ", React.createElement("code", null, "flex3"), ", respectively:"), React.createElement("div", {"className": "demo", "style": csx.horizontal}, React.createElement("div", {"style": csx.flex3}, "Alpha"), React.createElement("div", {"style": csx.flex}, "Beta"), React.createElement("div", {"style": csx.flex2}, "Gamma")), React.createElement("h3", {"id": "cross-axis-alignment", "class": "has-permalink"}, "Cross-axis alignment", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#cross-axis-alignment"}, "#")), React.createElement("p", null, "By default, children stretch to fit the cross-axis (e.g. ", React.createElement("em", null, "vertical"), " stretching in a ", React.createElement("em", null, "horizontal"), " layout)."), React.createElement("div", {"className": "demo", "style": tallHorizontal}, React.createElement("div", null, "Stretch Fill")), React.createElement("p", null, "Position ", React.createElement("em", null, "across"), " the main axis (e.g. ", React.createElement("em", null, "vertically"), " in a ", React.createElement("em", null, "horizontal"), " layout) by adding ", React.createElement("code", null, "center"), " or ", React.createElement("code", null, "start"), " or ", React.createElement("code", null, "end"), "."), React.createElement("div", {"className": "demo", "style": csx.extend(tallHorizontal, csx.center)}, React.createElement("div", null, "Center")), React.createElement("div", {"className": "demo", "style": csx.extend(tallHorizontal, csx.start)}, React.createElement("div", null, "start")), React.createElement("div", {"className": "demo", "style": csx.extend(tallHorizontal, csx.end)}, React.createElement("div", null, "end")), React.createElement("h2", {"id": "justification", "class": "has-permalink"}, "Justification", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#justification"}, "#")), React.createElement("p", null, "Justification controls the content position in the ", React.createElement("em", null, "main"), " axis. Use ", React.createElement("code", null, "startJustified"), " or ", React.createElement("code", null, "centerJustified"), " or ", React.createElement("code", null, "endJustified"), " or ", React.createElement("code", null, "aroundJustified"), " or ", React.createElement("code", null, "betweenJustified"), "."), React.createElement("div", {"className": "demo", "style": csx.extend(csx.horizontal, csx.startJustified)}, React.createElement("div", null, "start-justified"), React.createElement("div", null, "start-justified"), React.createElement("div", null, "start-justified")), React.createElement("div", {"className": "demo", "style": csx.extend(csx.horizontal, csx.centerJustified)}, React.createElement("div", null, "center-justified"), React.createElement("div", null, "center-justified"), React.createElement("div", null, "center-justified")), React.createElement("div", {"className": "demo", "style": csx.extend(csx.horizontal, csx.endJustified)}, React.createElement("div", null, "end-justified"), React.createElement("div", null, "end-justified"), React.createElement("div", null, "end-justified")), React.createElement("div", {"className": "demo", "style": csx.extend(csx.horizontal, csx.aroundJustified)}, React.createElement("div", null, "around-justified"), React.createElement("div", null, "around-justified"), React.createElement("div", null, "around-justified")), React.createElement("div", {"className": "demo", "style": csx.extend(csx.horizontal, csx.betweenJustified)}, React.createElement("div", null, "between-justified"), React.createElement("div", null, "between-justified"), React.createElement("div", null, "between-justified")), React.createElement("h2", {"id": "self-alignment", "class": "has-permalink"}, "Self alignment", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#self-alignment"}, "#")), "Alignment can also be set per-child (instead of using the layout containers rules):", React.createElement("div", {"className": "demo", "style": tallHorizontal}, React.createElement("div", {"style": csx.selfStart}, "selfStart"), React.createElement("div", {"style": csx.selfCenter}, "selfCenter"), React.createElement("div", {"style": csx.selfEnd}, "selfEnd"), React.createElement("div", {"style": csx.selfStretch}, "selfStretch"), React.createElement("div", null, "Default is stretch")), React.createElement("h2", {"id": "wrapping", "class": "has-permalink"}, "Wrapping", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "#wrapping"}, "#")), React.createElement("p", null, "Wrapped layouts can be enabled with the ", React.createElement("code", null, "wrap"), " style."), React.createElement("div", {"className": "demo", "style": csx.extend(narrowHorizontal, csx.wrap)}, React.createElement("div", null, "Alpha"), React.createElement("div", null, "Beta"), React.createElement("div", null, "Gamma"), React.createElement("div", null, "Delta")));
var Demo = React.createClass({
    render: function () {
        return content;
    }
});
document.addEventListener('DOMContentLoaded', function () {
    React.render(React.createElement(Demo, null), document.getElementById('container'));
});
